
2강)

젯브레인	:	러시아	:	인텔리 J
				:	안드로이드 스튜디오
				:	코틀린

자바개발자	:	안드로이드 개발!	(안드로이드 스튜디오)
		:	인텔리 J (자바개발, 스프링개발, 앱개발)

스프링 개발 툴	:	STS	-	인텔리 J



UTF8

비트 : 하나의 박스 : 1 or 0	-> 2개
2^8	= 256
8비트	: 하나의 문자	: 아스키코드
8비트	: 1바이트	: 하나의 문자를 표현할 수 있는 최소의 단위


4강	)

스프링 -> IOC -> 제어의 역전
너가(현진이) new 해서 메모리 띄우지마
내가(스프링) new 해서 띄울게

싱글톤 패턴 + 레퍼런스 변수
-> 스프링이 관리하겠다.

컴퍼넌트 스캔
: 패키지 모두 스캔
	: 필요한 것들을 메모리 로드 IOC 싱글톤
	
	
8강	)

깃의 기능
프로젝트 관리 가능

블로그 만드는 과정 기록하면서 만든다.

9강	)

1. 회원가입 기능	-join.java
2. 로그인 기능	-login.java

10강	)

http 통신 : 약속

통신 방법 4가지		: 요청의 방법
	:	get		: 데이터를 줘 - select
		post	: 데이터를 추가해줘 - insert
		put		: 데이터를 수정해줘 - update 
		delete	: 데이터를 삭제해줘 - delete
	  
	get )
		클라이언트 --------> 서버
				요청?조건
	
	post)
		클라이언트 --------> 서버
				id:123
				pw:123

11강	)

stateless
	: 요청시 마다 스트림을 연결해서 데이터를 주고받는 방식
	: http : stateless
stateful
	: 연결이 지속되있는 방식
	: 채팅

12강 )
					post 요청
	클라이언트	------------------------> 서버
				헤더 : Imag/jpeg	(데이터 설명)
				바디 : my.jpeg	(데이터)
				
	http 통신
		패킷스위칭
			패킷을 하나씩 전송
			속도 느림, 비용 절감
			, 연결선 하나에 붙어서 데이터 전송
			, 데이터 순서 섞임
			, 데이터 재조립 필요 (패킷의 재조립)
			, 모든 패킷은 헤더가 붙어있음 (헤더: 데이터 정보, 설명)
		서킷스위칭
			속도 빠름, 비용 많이듬
			, 각기 다른 서버 연결 계속 추가
	
	text, img, avi, 2진테이터, json...
	
	
	
MIME	타입:클라이언트에게 전송된 문서의 다양성을 알려주기 위한 매커니즘
		문법:type/subtype
			ex) image/jpeg, image/png...


15강	)

	오라클 사이트 
	-> (다운) 
	ojdbc 
	-> (카피) 
	내 프로젝트 : lib
	-> (빌드)
	
	(좀더 편리하게)
	: c 드라이버에 lib 라는 폴더를 만들고 그곳에 빌드
		-> 프로젝트 외부에 두고 호출해서 사용
		, 하나 이상의 프로젝트에서 호출하여 사용 가능 편리
	--> but, 배포 하면 호출못하니까 무소용
	
	라이브러리를 각각의 사이트에서 다운받지 않고
	중간 저장소에 저장 (일종의 파일서버)
	
	파일서버에만 접근에서 다운받기
	: 프로젝트의 pom.xml에 -> maven 프로젝트 관리도구를 기술
	
17강	)

	yml
		xml : 데이터 큼
		json : xml 보다 경량
		yml : json 보다 경량
			: key 와 value 사이에 한칸 띄움
			: 하위 데이터를 표현하기 위해 들여쓰기 (스페이스 두칸)
		
	: web.xml, root-context.xml, servlet-context.xml의 합본
	
22강	)

	연관관계 주인 = FK(외례키)를 가진 오브젝트
	
	자바프로젝트 -> JPA ->				DB
				board(id = 1)		join문
				user 정보				user + board + reply
								<---
				board
					-> +user
					   +reply
	
23강	)

	json 사용법, 특징
	
		java Object
	java -----------------------> java
		java Object 안됨
	java -----------------------> python
		--> 공용어 json
		
	json : 데이터 통신을 위한 중간데이터
	
	--> MIME타입이 json이 될것임~!

24강	)

	@ManyToOne
	@OneToMany
	@OneToOne
	@ManyToMany
	ManyToMany는 사용하지 않는다. 
	그 이유는 서로의 primary key로만 중간 테이블을 생성해주는데
	, 날짜나 시간 다른 필드들이 필요할 수 있기 때문에
	, 내가 중간 테이블을 직접만들고 @OneToMany, @OneToMany를 사용한다.
	

29강	)

	JPA : 영속성 컨텍스트
		if insert -> 
		
	
	request -> 		controller	: insert			JPA						DB
	response <-					: update			1차 캐시	-> (flush)	->	user table
								: delete
								: select 
	
	
	select 할꺼야 jpa에 영속화 되어있는지 확인
			-> 되어있음 (user data 존재)
				-> db 가서 확인 안하고 jpa꺼 가져다씀
				-> 부화가 덜함
	
	update	: JPA 의 데이터 가져와서 변경	(save 호출)
				내가 save 해서 변경한 데이터랑
				영속화 되어있는 id 동일
					-> 내용 변경하면 영속화 애도 변경됨
						-> flush 해서 db도 변경됨
	
	
	@Transaction			JPA						DB
	controller(){			영속성 컨텍스트
	
		값 변경 			-> 	영속화된 오브젝트
							: 변경된거 인식 후 
							컨트롤러 종료시 flush		->  DB data 변경
	
	}	-> 종료시 commit (변경을 감지해서 DB에 수정을 날려줌 : 더티채킹)
	
32강	)
	
	1. Get요청
	주소에 데이터를 담아 보낸다. 데이터 형태는 key=value
	특징 : body로 데이터를 담아 보내지 않음

	2. Post, Put, Delete 요청 (데이터를 변경)
	Body에 데이터를 담아 보낸다. 데이터 형태는 json으로 통일하는 것이 좋다.
	
	데이터를 담아 보내야 할 것이 많음
	form 태그 method = 'post'
	form 태그 -> get, post 요청 (key=value)
	자바스크립트로 요청을 해야함.
	
	통일 : 자바스크립트로 ajax 요청 + 데이터는 json으로 통일~
	
	ex ) form:form 태그 -> get, post, put, delete 요청 가능
	
	3. 오브젝트로 데이터 받기
	post 방식의 key = value (x-www-form-urlencoded)
	username=hyunjin
	
	3. 스프링 컨트롤러의 파싱 전략 1
	스프링 컨트롤러는 key=value 데이터를 자동으로 파싱하여 변수에 담아준다.
	가령 get요청은 key=value이고 
	post요청중에 x-www-form-urlencoded (form태그를 만들어서 데이터 전송)시에도 
	key=value 이기 때문에 이러한 데이터는 함수의 파라메터로 받을 수 있다.

	4. 스프링 컨트롤러의 파싱 전략 2
	스프링은 key=value 형태의 데이터를 오브젝트로 파싱해서 받아주는 역할도 한다.
	** 이때 주의 할점은 setter가 없으면 
	key=value 데이터를 스프링이 파싱해서 넣어주지 못한다.

	5. key=value가 아닌 데이터는 어떻게 파싱할까?
	json 데이터나 일반 text데이터는 스프링 컨트롤러에서 받기 위해서는 
	@RequestBody 어노테이션이 필요하다.
	** 기본전략이 스프링 컨트롤러는 key=value 데이터를 파싱해서 받아주는 일을 하는데 
	다른 형태의 데이터 가령 json 같은 데이터는 아래와 같이 생겼다.

	{
		"username":"ssar",
		"password":"1234"
	}

	이런 데이터는 스프링이 파싱해서 오브젝트로 받지 못한다. 
	그래서 @RequestBody 어노테이션을 붙이면 MessageConverter 클래스를 구현한 
	Jackson 라이브러리가 발동하면서 json 데이터를 자바 오브젝트로 파싱하여 받아준다.	

	6. form 태그로 json데이터 요청방법
	
	<form></form> 태그 생성 후 아이디
	button 에 function
	function 실행시 ajax 데이터를 application/json 으로 type 지정
	
36강	)

	회원가입시 Ajax를 사용하는 2가지 이유는
	
	1. 요청에 대한 응답을 html이 아닌 Data(json)를 받기 위하여!
	
	클라이언트(브라우저) : 서버에게 요청
	서버 :  응답 : html로
	
	클라이언트(앱)	: 서버에게 요청
	서버 : DB 요청
	DB : 서버에게 응답 
	서버 : DATA만 응답
	
	--> 서로 응답하는게 다르니까 걍 두개다 데이터를 리턴하는 서버로 만들어버리자
	: 서버를 하나로 통일 할 수 있기 때문	
	
	2. 비동기 통신을 하기 
	
	; 절차적으로 일을 수행 엑스, 일의 순서에 맞게 안함


39강	)
		
	서비스 필요 이유
	
	1. 트랜잭션 관리

	2. 서비스 의미 때문

41강	)

	트랜잭션 :  일이 처리되기 위한 가장 작은 단위

	DB 격리 처리
	
	begin transaction	: 보통 데이터의 변경이 있을 경우에 사용
	read commit - 해야 내용 저장됨 
	
42강	)
			
	read commit의 문제점 : 
	데이터의 정합성이 꺠질 위험성이 있음	: 부정합

	(팬텀 리드)
	: 결과값이 보였다가 안보였다가
	
	--> 해결법 repeatable read 사용
	
43강	)
	
	repeatable read	:	자신의 트랜잭션이 끝나기 전까지는 같은 ㅏ결과값을 뱉어냄
					: 자신의 트랜잭션 번호보다 낮은 undo로그를 보고 select
					
	: 정합성을 유지하기 위해서 트랜잭션을 유지해서 select를 사용하는 것이 좋다
	
44강	)
	
	스프링 시작 -> 톰캣 시작 (서버 작동 )	-> web.xml -> comtext.xml (DB연결 테스트)
								1) DB 연결 세션 생성			
								2) 트랜잭션 시작
								
								3) 트랜잭션 종료
								4) 변경 감지 후 flash
								5) DB 연결 세션 종료

45강	)

	기존 트랜잭션 방식의 문제점~!~!~ - 개선)
	
	요청 -> 
			1) JDBC 커넥션 시작
			2) 트랜잭션 시작
			3) 영속성 컨텍스트 시작
	컨트롤러
	서비스
			4) JDBC 커넥션 종료
			5) 트랜잭션 종료
			6) 영속성 컨텍스트 종료
	컨트롤러
		
			--> service가ㅏ 종료되는 시점에서 종료 가능
			
	---------------------------------------->>
			
	요청 	->
			1) 영속성 컨텍스트 시작
			
	컨트롤러
			2) JDBC 커넥션 시작
			3) 트랜잭션 시작	
	서비스
			4) JDBC 커넥션 종료
			5) 트랜잭션 종료
			6) 영속성 컨텍스트 종료
	컨트롤러
	
	-----> 문제 ) 


48강	)

	ID : user
	PW : aee53f8d-2152-4556-834c-ce438ef76c82

	PW : bea65994-791c-4d55-a414-eed97d8dc16e
	
	PW : b0b34924-7b3f-4b24-bd05-fcbf4c82fe08
	
50강	)

	해쉬의 특징)
	
	시큐리티 -> 로그인 요청 
			: 로그인 가로치기 (파라미터 가로챔)
							:username, password
							: 로그인 진행 완료
					-> 시큐리티 세션에 유저정보 저장 (IOC)
			
	해쉬란 )
	
	안녕 -(암호화)-> asdo1234sd : 고정길이의 문자열로 변경
	
	: 내용 변경 후 재 암호화 : _> 해쉬 변경됨
	
	위조 확인 가능함
	
51강	)

	Csrf, XSS
	
	XSS : 자바스크립트 공격
	
	Csrf : 시큐리티 : /admin/**
					권한이 admin인 사람만
	
	: 요청을 post 방식으로 해야함
	: 사용자 세션에 토큰을 생성하여 저장
	
59강 )

	스프링작동원리 복습
	
	1. 톰캣 시작
	2. 필터 
	3. 디스패처 (주소 확인)
	 	controller
		service
		JPA repository
		영송석 컨택스트
				--일단 대기 (요청이 오면 스레드가 하나씩 만들어지면서 뜬다.)
	
		DataSource
		DB
	
	--> 다시 들어보기 59강 ★
	

61강	)

	세션 : 시큐리티 컨텍스트
	
	사용자 로그인 요청 - (Authemtication Manager) : 인터셉트 가로채ㅐ
					세션 만들어주는 조건
						userDetailService
							로그인 인증 요청
								인증 필드
								유저패스인증토큰
									
	
		: 모르겟음 한번 더 듣기 ☆☆☆☆☆
		: 계속 500에러 수정 필요	: 수정함
		

62강~65강

	62 : 카카오 로그인 환경설정 : 16
	63 : 25
	64 : 37
	65 : 88

	180









